<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Fixmatch主要代码注释</title>
    <url>/article/2022111294813030.html</url>
    <content><![CDATA[<h1 id="fixmatch">Fixmatch</h1>
<h2 id="设置种子">设置种子</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">set_seed</span>(<span class="params">args</span>):</span><br><span class="line">    random.seed(args.seed) <span class="comment"># python的随机性</span></span><br><span class="line">    np.random.seed(args.seed) <span class="comment"># np的随机性</span></span><br><span class="line">    torch.manual_seed(args.seed) <span class="comment"># torch的CPU随机性，为CPU设置随机种子</span></span><br><span class="line">    <span class="keyword">if</span> args.n_gpu &gt; <span class="number">0</span>:</span><br><span class="line">        torch.cuda.manual_seed_all(args.seed) <span class="comment"># torch的GPU随机性，为所有GPU设置随机种子</span></span><br></pre></td></tr></table></figure>
<ol type="1">
<li>设置随机种子</li>
<li>将种子赋予np</li>
<li>将种子赋予torch</li>
<li>将种子赋予cuda</li>
</ol>
<h2 id="gpu设置">GPU设置</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> args.local_rank == -<span class="number">1</span>:</span><br><span class="line">    device = torch.device(<span class="string">&#x27;cuda&#x27;</span>, args.gpu_id)</span><br><span class="line">    args.world_size = <span class="number">1</span></span><br><span class="line">    args.n_gpu = torch.cuda.device_count()</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    torch.cuda.set_device(args.local_rank)</span><br><span class="line">    device = torch.device(<span class="string">&#x27;cuda&#x27;</span>, args.local_rank)</span><br><span class="line">    torch.distributed.init_process_group(backend=<span class="string">&#x27;nccl&#x27;</span>)</span><br><span class="line">    args.world_size = torch.distributed.get_world_size()</span><br><span class="line">    args.n_gpu = <span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>根据local_rank决定是否采取分布式。如果local_rank=-1，说明分布式失效；如果local_rank不等于-1，则根据不同的卡配置不同的进程数；获取设备device方便后续将数据和模型加载在上面（代码为.to(device))；初始化设置分布式的后端等。</p>
<p><strong>torch.distributed.barrier()的使用：</strong></p>
<p>①数据集：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> args.local_rank <span class="keyword">not</span> <span class="keyword">in</span> [-<span class="number">1</span>, <span class="number">0</span>]:</span><br><span class="line">    torch.distributed.barrier()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取数据集</span></span><br><span class="line">labeled_dataset, unlabeled_dataset, test_dataset = DATASET_GETTERS[args.dataset](</span><br><span class="line">    args, <span class="string">&#x27;./data&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> args.local_rank == <span class="number">0</span>:</span><br><span class="line">    torch.distributed.barrier()</span><br></pre></td></tr></table></figure>
<p>有些操作是不需要多卡同时运行的，如数据集和模型的加载。因此，PyTorch对非主进程的卡上面的运行进行了barrier设置。如果是在并行训练非主卡上，其它进行需要先等待主进程读取并缓存数据集，再从缓存中读取数据，以同步不同进程的数据，避免出现数据处理不同步的现象。</p>
<p>②模型</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> args.local_rank <span class="keyword">not</span> <span class="keyword">in</span> [-<span class="number">1</span>, <span class="number">0</span>]:</span><br><span class="line">    torch.distributed.barrier()</span><br><span class="line"></span><br><span class="line">model = create_model(args)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> args.local_rank == <span class="number">0</span>:</span><br><span class="line">    torch.distributed.barrier()</span><br></pre></td></tr></table></figure>
<p>先对其余进程设置一个障碍，等到主进程加载完模型和数据后，再对主进程设置障碍，使所有进程都处于同一“出发线”，最后再同时释放。</p>
<span id="more"></span>
<h2 id="数据集划分">数据集划分</h2>
<p>本代码使用的数据集分为三类：带标签的训练集，不带标签的训练集，测试集。虽然表面上需要一个训练集是“不带标签”的，但是PyTorch并没有直接舍去标签的数据集设置。一开始我在想，如果是我自己来写代码，应该要怎么处理呢？后来发现代码根本没有拘泥于“不带标签”这个事情，因为在返回数据集和标签时，使用“_”直接代替掉标签即可，损失函数也不需要使用标签。</p>
<p>核心API： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">labeled_dataset, unlabeled_dataset, test_dataset = DATASET_GETTERS[args.dataset](args, <span class="string">&#x27;./data&#x27;</span>)</span><br></pre></td></tr></table></figure></p>
<p>dataset-&gt;cifar.py，发现调用了如下函数（get_cifar10和get_cifar100极其类似，只是数据集分类的类别数不一样而已。下面仅以get_cifar100为例）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def get_cifar100(args, root):</span><br><span class="line">    # 图像变换</span><br><span class="line">    transform_labeled = transforms.Compose([</span><br><span class="line">        transforms.RandomHorizontalFlip(),</span><br><span class="line">        transforms.RandomCrop(size=32,</span><br><span class="line">                              padding=int(32*0.125),</span><br><span class="line">                              padding_mode=&#x27;reflect&#x27;),</span><br><span class="line">        transforms.ToTensor(),</span><br><span class="line">        transforms.Normalize(mean=cifar100_mean, std=cifar100_std)])</span><br><span class="line"></span><br><span class="line">    transform_val = transforms.Compose([</span><br><span class="line">        transforms.ToTensor(),</span><br><span class="line">        transforms.Normalize(mean=cifar100_mean, std=cifar100_std)])</span><br><span class="line">   </span><br><span class="line">    # 数据集设置</span><br><span class="line">    base_dataset = datasets.CIFAR100(</span><br><span class="line">        root, train=True, download=True)</span><br><span class="line"></span><br><span class="line">    train_labeled_idxs, train_unlabeled_idxs = x_u_split(</span><br><span class="line">        args, base_dataset.targets)</span><br><span class="line"></span><br><span class="line">    train_labeled_dataset = CIFAR100SSL(</span><br><span class="line">        root, train_labeled_idxs, train=True,</span><br><span class="line">        transform=transform_labeled)</span><br><span class="line"></span><br><span class="line">    train_unlabeled_dataset = CIFAR100SSL(</span><br><span class="line">        root, train_unlabeled_idxs, train=True,</span><br><span class="line">        transform=TransformFixMatch(mean=cifar100_mean, std=cifar100_std))</span><br><span class="line"></span><br><span class="line">    test_dataset = datasets.CIFAR100(</span><br><span class="line">        root, train=False, transform=transform_val, download=False)</span><br><span class="line"></span><br><span class="line">    return train_labeled_dataset, train_unlabeled_dataset, test_dataset</span><br></pre></td></tr></table></figure>
<p>get_cifar100函数包括两部分：transform的设置和数据集设置。</p>
<p>（1）transform</p>
<p>对于测试集和带标签的训练集，可以根据论文[1]的介绍进行设置。但是对于不带标签的训练集，代码调用了TransformFixMatch类，因为这部分的训练集需要使用弱增强和强增强的方法，两种方法是不同的，所以需要特别设置一个callable的类，能够将两种transform手段凑在一块。当构建dataset调用transform时，可以直接调用call函数，直接返回两个增强手段处理后的图像。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TransformFixMatch</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, mean, std</span>):</span><br><span class="line">        self.weak = transforms.Compose([</span><br><span class="line">            transforms.RandomHorizontalFlip(),</span><br><span class="line">            transforms.RandomCrop(size=<span class="number">32</span>,</span><br><span class="line">                                  padding=<span class="built_in">int</span>(<span class="number">32</span>*<span class="number">0.125</span>),</span><br><span class="line">                                  padding_mode=<span class="string">&#x27;reflect&#x27;</span>)])</span><br><span class="line">        self.strong = transforms.Compose([</span><br><span class="line">            transforms.RandomHorizontalFlip(),</span><br><span class="line">            transforms.RandomCrop(size=<span class="number">32</span>,</span><br><span class="line">                                  padding=<span class="built_in">int</span>(<span class="number">32</span>*<span class="number">0.125</span>),</span><br><span class="line">                                  padding_mode=<span class="string">&#x27;reflect&#x27;</span>),</span><br><span class="line">            RandAugmentMC(n=<span class="number">2</span>, m=<span class="number">10</span>)])</span><br><span class="line">        self.normalize = transforms.Compose([</span><br><span class="line">            transforms.ToTensor(),</span><br><span class="line">            transforms.Normalize(mean=mean, std=std)])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self, x</span>):</span><br><span class="line">        weak = self.weak(x)</span><br><span class="line">        strong = self.strong(x)</span><br><span class="line">        <span class="keyword">return</span> self.normalize(weak), self.normalize(strong)</span><br></pre></td></tr></table></figure>
<p>（2）数据索引设置</p>
<p>怎么从原始的CIFAR数据集提取出带标签的训练集和无标签的训练集？注意到PyTorch数据集类有一个函数成员def
<strong>getitem</strong>(self,
index)，核心参数是index，所以我们构建以上两个训练集，本质上是构建训练集对应的索引值。下面是索引生成函数x_u_split的代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def x_u_split(args, labels):</span><br><span class="line">    label_per_class = args.num_labeled // args.num_classes</span><br><span class="line">    labels = np.array(labels) #每个label是一个数字</span><br><span class="line">    labeled_idx = []</span><br><span class="line">    unlabeled_idx = np.array(range(len(labels)))</span><br><span class="line">    for i in range(args.num_classes): </span><br><span class="line">        idx = np.where(labels == i)[0] #有[0]是因为np.where得到的是一个tuple,需要把tuple的元素提取出来</span><br><span class="line">        idx = np.random.choice(idx, label_per_class, False) </span><br><span class="line">        labeled_idx.extend(idx)</span><br><span class="line">    labeled_idx = np.array(labeled_idx)</span><br><span class="line">    assert len(labeled_idx) == args.num_labeled</span><br><span class="line"></span><br><span class="line">    if args.expand_labels or args.num_labeled &lt; args.batch_size: </span><br><span class="line">        num_expand_x = math.ceil( #向上取整</span><br><span class="line">            args.batch_size * args.eval_step / args.num_labeled) #等于17</span><br><span class="line"></span><br><span class="line">        #将参数元组的元素数组按水平方向进行叠加</span><br><span class="line">        labeled_idx = np.hstack([labeled_idx for _ in range(num_expand_x)])</span><br><span class="line">    np.random.shuffle(labeled_idx)</span><br><span class="line">    return labeled_idx, unlabeled_idx</span><br></pre></td></tr></table></figure>
<p>每个类带标签数据的个数是均衡的，每个类带标签的数据个数 =
带标签数据总个数//类数，所以，使用一个循环（10个类）。
对于每一个类，找出他们在总数据（labels）中的数据索引，然后将labels（原本是列表）转换为numpy数组。并用random.choice随机选择label_per_class个数据，将他们加入到带标签的数据索引labeled_idx中。
对于不带标签的数据，原文作者使用了所有的数据（包含带标签的数据），所以他的索引为全部数据的索引，unlabeled_idx可以直接对应全体数据。
需要注意的一个点是，args.expand_labels参数作者默认为true的，所以我们要进行数据重复。
或者num_labeled比batch_size还小，则对数组进行扩充。
这里重复的次数num_expand_x为 64（batch_size ）* 1024（eval_step）/ 4000
（num_labeled）=17次 所以带标签的数据为
68000个（每个索引都重复了17次）。</p>
<p>（3）数据集设置</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CIFAR100SSL</span>(datasets.CIFAR100):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, root, indexs, train=<span class="literal">True</span>,</span></span><br><span class="line"><span class="params">                 transform=<span class="literal">None</span>, target_transform=<span class="literal">None</span>,</span></span><br><span class="line"><span class="params">                 download=<span class="literal">False</span></span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(root, train=train,</span><br><span class="line">                         transform=transform,</span><br><span class="line">                         target_transform=target_transform,</span><br><span class="line">                         download=download)</span><br><span class="line">        <span class="keyword">if</span> indexs <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            self.data = self.data[indexs]</span><br><span class="line">            self.targets = np.array(self.targets)[indexs]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getitem__</span>(<span class="params">self, index</span>):</span><br><span class="line">        img, target = self.data[index], self.targets[index]</span><br><span class="line">        img = Image.fromarray(img)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.transform <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            img = self.transform(img)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.target_transform <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            target = self.target_transform(target)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> img, target</span><br></pre></td></tr></table></figure>
<h2 id="scheduler">scheduler</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_cosine_schedule_with_warmup</span>(<span class="params">optimizer,</span></span><br><span class="line"><span class="params">                                    num_warmup_steps,</span></span><br><span class="line"><span class="params">                                    num_training_steps,</span></span><br><span class="line"><span class="params">                                    num_cycles=<span class="number">7.</span>/<span class="number">16.</span>,</span></span><br><span class="line"><span class="params">                                    last_epoch=-<span class="number">1</span></span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_lr_lambda</span>(<span class="params">current_step</span>):</span><br><span class="line">        <span class="keyword">if</span> current_step &lt; num_warmup_steps:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">float</span>(current_step) / <span class="built_in">float</span>(<span class="built_in">max</span>(<span class="number">1</span>, num_warmup_steps))</span><br><span class="line">        no_progress = <span class="built_in">float</span>(current_step - num_warmup_steps) / \</span><br><span class="line">            <span class="built_in">float</span>(<span class="built_in">max</span>(<span class="number">1</span>, num_training_steps - num_warmup_steps))</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span>(<span class="number">0.</span>, math.cos(math.pi * num_cycles * no_progress))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> LambdaLR(optimizer, _lr_lambda, last_epoch)</span><br><span class="line"><span class="comment"># LambdaLR设置学习率为初始学习率乘以给定lr_lambda函数的值</span></span><br><span class="line"><span class="comment"># 当last_epoch=-1时, base_lr为optimizer优化器中的lr</span></span><br><span class="line"><span class="comment"># 每次执行 scheduler.step(),  last_epoch=last_epoch +1</span></span><br></pre></td></tr></table></figure>
<p>scheduler是为了动态调整训练期间的学习率，使模型更好地收敛。论文使用的是带有warmup性质的余弦退火学习率调整器。核心是返回了一个自定义函数的学习率调整器，调整的函数是_lr_lambda，如果当前的step少于warmup的步数，则使用线性递增的策略一直增加到初始学习率；而后使用余弦变化的策略改变学习率:
<span class="math display">\[
\eta_1=\cos{(\frac{7\pi k}{16K})}
\]</span> <span class="math inline">\(\eta\)</span>是初始学习率，<span
class="math inline">\(k\)</span>是当前的步数，<span
class="math inline">\(K\)</span>是总步数。</p>
<h2 id="混合精度">混合精度</h2>
<p>本代码使用的是英伟达开发的apex库，可以通过使用混合精度，在保证精度丢失很少的情况下，减少内存，增快训练速度。混合精度涉及对模型和优化器的重初始化、损失函数的反向传播等。代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> apex <span class="keyword">import</span> amp</span><br><span class="line">model, optimizer = amp.initialize(model, optimizer, opt_level=args.opt_level)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> amp.scale_loss(loss, optimizer) <span class="keyword">as</span> scaled_loss:</span><br><span class="line">    scaled_loss.backward()</span><br></pre></td></tr></table></figure>
<h2 id="指数移动平均ema">指数移动平均（EMA）</h2>
<p>EMA在本代码是用于更新模型权重的，核心公式就这一条： <span
class="math display">\[
v_t=\beta v_{t-1}+(1-\beta)\theta_t
\]</span> 这里的参数<span
class="math inline">\(v\)</span>代表测试用模型的参数权重。训练时，原模型就按照正常的节奏来训练、更新权重，而另外开辟一个EMA模型，在原模型更新权重的同时也跟着更新权重，并作为最后使用的模型，检测在测试集上的表现。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ModelEMA</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, args, model, decay</span>):</span><br><span class="line">        self.ema = deepcopy(model)</span><br><span class="line">        self.ema.to(args.device)</span><br><span class="line">        self.ema.<span class="built_in">eval</span>()</span><br><span class="line">        self.decay = decay</span><br><span class="line">        self.ema_has_module = <span class="built_in">hasattr</span>(self.ema, <span class="string">&#x27;module&#x27;</span>)</span><br><span class="line">        <span class="comment"># Fix EMA. https://github.com/valencebond/FixMatch_pytorch thank you!</span></span><br><span class="line">        self.param_keys = [k <span class="keyword">for</span> k, _ <span class="keyword">in</span> self.ema.named_parameters()]</span><br><span class="line">        self.buffer_keys = [k <span class="keyword">for</span> k, _ <span class="keyword">in</span> self.ema.named_buffers()]</span><br><span class="line">        <span class="keyword">for</span> p <span class="keyword">in</span> self.ema.parameters():</span><br><span class="line">            p.requires_grad_(<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update</span>(<span class="params">self, model</span>): <span class="comment"># 核心模块</span></span><br><span class="line">        <span class="comment"># hasattr函数用于判断对象是否包含对应的属性。</span></span><br><span class="line">        needs_module = <span class="built_in">hasattr</span>(model, <span class="string">&#x27;module&#x27;</span>) <span class="keyword">and</span> <span class="keyword">not</span> self.ema_has_module</span><br><span class="line">        <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">            msd = model.state_dict() <span class="comment"># torch.nn.Module模块中的state_dict变量存放训练过程中需要学习的权重</span></span><br><span class="line">            esd = self.ema.state_dict()</span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> self.param_keys:</span><br><span class="line">                <span class="keyword">if</span> needs_module:</span><br><span class="line">                    j = <span class="string">&#x27;module.&#x27;</span> + k</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    j = k</span><br><span class="line">                model_v = msd[j].detach()</span><br><span class="line">                ema_v = esd[k]</span><br><span class="line">                <span class="comment"># ema_v是过去的平均状态，model_v是现在的参数</span></span><br><span class="line">                esd[k].copy_(ema_v * self.decay + (<span class="number">1.</span> - self.decay) * model_v)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> self.buffer_keys:</span><br><span class="line">                <span class="keyword">if</span> needs_module:</span><br><span class="line">                    j = <span class="string">&#x27;module.&#x27;</span> + k</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    j = k</span><br><span class="line">                esd[k].copy_(msd[j])</span><br></pre></td></tr></table></figure>
<h2 id="权重衰减weight-decay">权重衰减（Weight Decay）</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">grouped_parameters = [</span><br><span class="line">        <span class="comment"># 若网络层不包含 bias 或 BatchNorm，则应用 weight_decay</span></span><br><span class="line">        <span class="comment"># any() 函数用于判断给定的可迭代参数 iterable 是否全部为 False，则返回 False，如果有一个为 True，则返回 True</span></span><br><span class="line">        &#123;<span class="string">&#x27;params&#x27;</span>: [p <span class="keyword">for</span> n, p <span class="keyword">in</span> model.named_parameters() <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">any</span>(</span><br><span class="line">            nd <span class="keyword">in</span> n <span class="keyword">for</span> nd <span class="keyword">in</span> no_decay)], <span class="string">&#x27;weight_decay&#x27;</span>: args.wdecay&#125;,</span><br><span class="line">        <span class="comment"># 反之，则不用 weight_decay</span></span><br><span class="line">        &#123;<span class="string">&#x27;params&#x27;</span>: [p <span class="keyword">for</span> n, p <span class="keyword">in</span> model.named_parameters() <span class="keyword">if</span> <span class="built_in">any</span>(</span><br><span class="line">            nd <span class="keyword">in</span> n <span class="keyword">for</span> nd <span class="keyword">in</span> no_decay)], <span class="string">&#x27;weight_decay&#x27;</span>: <span class="number">0.0</span>&#125;</span><br><span class="line">    ]</span><br></pre></td></tr></table></figure>
<h2 id="核心算法">核心算法</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">labeled_iter = <span class="built_in">iter</span>(labeled_trainloader)</span><br><span class="line">unlabeled_iter = <span class="built_in">iter</span>(unlabeled_trainloader)</span><br><span class="line"></span><br><span class="line">model.train()</span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(args.start_epoch, args.epochs):</span><br><span class="line">    <span class="comment"># 平均处理器，用于存储一些统计信息</span></span><br><span class="line">    batch_time = AverageMeter()</span><br><span class="line">    data_time = AverageMeter()</span><br><span class="line">    losses = AverageMeter()</span><br><span class="line">    losses_x = AverageMeter()</span><br><span class="line">    losses_u = AverageMeter()</span><br><span class="line">    mask_probs = AverageMeter()</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> args.no_progress:</span><br><span class="line">        p_bar = tqdm(<span class="built_in">range</span>(args.eval_step),</span><br><span class="line">                     disable=args.local_rank <span class="keyword">not</span> <span class="keyword">in</span> [-<span class="number">1</span>, <span class="number">0</span>])</span><br><span class="line">    <span class="keyword">for</span> batch_idx <span class="keyword">in</span> <span class="built_in">range</span>(args.eval_step):</span><br><span class="line">        <span class="comment"># 使用iter(next)读取指定次数的batch，而不通过Dataloader。Dataloader的长度也不同</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            inputs_x, targets_x = labeled_iter.<span class="built_in">next</span>()</span><br><span class="line">            <span class="comment">#print(inputs_x.shape) # torch.Size([64, 3, 32, 32])</span></span><br><span class="line">            <span class="comment">#print(targets_x.shape) # torch.Size([64])</span></span><br><span class="line">            <span class="comment">#print(targets_x)</span></span><br><span class="line">        <span class="keyword">except</span>: <span class="comment"># 当循环结束时，重新开始循环</span></span><br><span class="line">            <span class="keyword">if</span> args.world_size &gt; <span class="number">1</span>:</span><br><span class="line">                labeled_epoch += <span class="number">1</span></span><br><span class="line">                labeled_trainloader.sampler.set_epoch(labeled_epoch)</span><br><span class="line">            labeled_iter = <span class="built_in">iter</span>(labeled_trainloader)</span><br><span class="line">            inputs_x, targets_x = labeled_iter.<span class="built_in">next</span>()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            (inputs_u_w, inputs_u_s), _ = unlabeled_iter.<span class="built_in">next</span>()</span><br><span class="line">            <span class="comment">#print(inputs_u_w.shape) #torch.Size([448, 3, 32, 32])</span></span><br><span class="line">            <span class="comment">#print(inputs_u_s.shape) #torch.Size([448, 3, 32, 32])</span></span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">if</span> args.world_size &gt; <span class="number">1</span>:</span><br><span class="line">                unlabeled_epoch += <span class="number">1</span></span><br><span class="line">                unlabeled_trainloader.sampler.set_epoch(unlabeled_epoch)</span><br><span class="line">            unlabeled_iter = <span class="built_in">iter</span>(unlabeled_trainloader)</span><br><span class="line">            (inputs_u_w, inputs_u_s), _ = unlabeled_iter.<span class="built_in">next</span>() <span class="comment"># 忽略标签</span></span><br><span class="line"></span><br><span class="line">        data_time.update(time.time() - end)</span><br><span class="line">        batch_size = inputs_x.shape[<span class="number">0</span>] <span class="comment"># 64</span></span><br><span class="line">        <span class="comment"># 带标签的数据每批次有B个，无标签数据每批次有μB个(每个2张图像)，加起来就是(2μ+1)B个</span></span><br><span class="line">        inputs = interleave(</span><br><span class="line">            torch.cat((inputs_x, inputs_u_w, inputs_u_s)), <span class="number">2</span>*args.mu+<span class="number">1</span>).to(args.device)</span><br><span class="line">        <span class="comment"># print(inputs.shape) #torch.Size([960, 3, 32, 32]) 960=448+448+64 960=64*(2*7+1) 将数据合并一起</span></span><br><span class="line">        targets_x = targets_x.to(args.device)</span><br><span class="line">        <span class="comment"># print(targets_x.shape) #torch.Size([64])</span></span><br><span class="line">        </span><br><span class="line">        logits = model(inputs)</span><br><span class="line">        <span class="comment">#print(logits.shape) #torch.Size([960, 10])</span></span><br><span class="line">        logits = de_interleave(logits, <span class="number">2</span>*args.mu+<span class="number">1</span>)</span><br><span class="line">        <span class="comment">#print(logits.shape) #torch.Size([960, 10])</span></span><br><span class="line">        logits_x = logits[:batch_size] <span class="comment"># 前B个</span></span><br><span class="line">        <span class="comment">#print(logits_x.shape) #torch.Size([64, 10])</span></span><br><span class="line">        logits_u_w, logits_u_s = logits[batch_size:].chunk(<span class="number">2</span>)</span><br><span class="line">        <span class="comment"># torch.chunk 将输入Tensor拆分为特定数量的块。如果给定维度dim上的Tensor大小不能够被整除，则最后一个块会小于之前的块。</span></span><br><span class="line">        <span class="comment">#print(logits_u_w.shape) #torch.Size([448, 10]) </span></span><br><span class="line">        <span class="keyword">del</span> logits <span class="comment"># 省出内存，del删除的是变量，而不是数据。</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 带标签数据的损失函数</span></span><br><span class="line">        Lx = F.cross_entropy(logits_x, targets_x, reduction=<span class="string">&#x27;mean&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 通过weak_augment样本计算伪标记pseudo label和mask，</span></span><br><span class="line">        <span class="comment"># 其中，mask用来筛选哪些样本最大预测概率超过阈值，可以拿来使用，哪些不能使用</span></span><br><span class="line"></span><br><span class="line">        pseudo_label = torch.softmax(logits_u_w.detach()/args.T, dim=-<span class="number">1</span>) <span class="comment"># 与 dim=2 等价，对某一维度的行进行softmax运算，和为1</span></span><br><span class="line">        <span class="comment"># Softmax为T＝1时的特例</span></span><br><span class="line">        max_probs, targets_u = torch.<span class="built_in">max</span>(pseudo_label, dim=-<span class="number">1</span>)</span><br><span class="line">        <span class="comment">#print(max_probs.shape) # torch.Size([448]) 448个最大概率值</span></span><br><span class="line">        <span class="comment">#print(targets_u.shape) # torch.Size([448]) 448个伪标签的值，实际上是pseudo_label中最大位置的索引</span></span><br><span class="line">        <span class="comment">#print(targets_u) #tensor([3, 5, 1 ....], device=&#x27;cuda:0&#x27;)</span></span><br><span class="line">        mask = max_probs.ge(args.threshold).<span class="built_in">float</span>() <span class="comment"># greater and equal（大于等于）</span></span><br><span class="line">        <span class="comment"># 比0.95大才说明这个标签置信度高，如果低于这个阈值，即使计算了交叉熵，也会被mask为0</span></span><br><span class="line">        <span class="comment"># torch.ge(a,b)逐个元素比较a，b的大小</span></span><br><span class="line">        <span class="comment"># print(mask.shape) #torch.Size([448]) 448个0/1</span></span><br><span class="line">        <span class="comment"># print(F.cross_entropy(logits_u_s, targets_u,reduction=&#x27;none&#x27;)) # reduction=&#x27;none&#x27;不求平均，返回448个值</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 不带标签数据的损失函数</span></span><br><span class="line">        Lu = (F.cross_entropy(logits_u_s, targets_u,</span><br><span class="line">                              reduction=<span class="string">&#x27;none&#x27;</span>) * mask).mean()</span><br><span class="line"></span><br><span class="line">        loss = Lx + args.lambda_u * Lu <span class="comment"># 完整的损失函数</span></span><br></pre></td></tr></table></figure>
<p>其中torch.max的用法参考如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = torch.randn(<span class="number">24</span>).reshape(<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br></pre></td></tr></table></figure>
<p>运行结果:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tensor([[[-<span class="number">0.9135</span>,  <span class="number">1.3096</span>,  <span class="number">0.2803</span>, -<span class="number">0.9314</span>],</span><br><span class="line">         [-<span class="number">0.2687</span>, -<span class="number">0.0968</span>, -<span class="number">0.7156</span>, -<span class="number">0.8814</span>],</span><br><span class="line">         [-<span class="number">1.0099</span>,  <span class="number">1.6910</span>,  <span class="number">0.3458</span>, -<span class="number">0.6547</span>]],</span><br><span class="line"></span><br><span class="line">        [[-<span class="number">0.4334</span>, -<span class="number">0.0464</span>, -<span class="number">1.9236</span>,  <span class="number">0.3148</span>],</span><br><span class="line">         [ <span class="number">0.3628</span>, -<span class="number">0.7063</span>, -<span class="number">0.1750</span>,  <span class="number">1.5068</span>],</span><br><span class="line">         [ <span class="number">1.1270</span>, -<span class="number">0.9374</span>, -<span class="number">0.8419</span>, -<span class="number">0.0050</span>]]])</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">A = torch.softmax(a.detach()/<span class="number">1</span>, dim=-<span class="number">1</span>) <span class="comment"># 与 dim=2 等价，对某一维度的行进行softmax运算，和为1</span></span><br><span class="line"><span class="comment"># A = torch.softmax(a, dim=-1)</span></span><br><span class="line"><span class="built_in">print</span>(A)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tensor([[[<span class="number">0.0689</span>, <span class="number">0.6362</span>, <span class="number">0.2273</span>, <span class="number">0.0677</span>],</span><br><span class="line">         [<span class="number">0.2968</span>, <span class="number">0.3525</span>, <span class="number">0.1899</span>, <span class="number">0.1608</span>],</span><br><span class="line">         [<span class="number">0.0472</span>, <span class="number">0.7025</span>, <span class="number">0.1830</span>, <span class="number">0.0673</span>]],</span><br><span class="line"></span><br><span class="line">        [[<span class="number">0.2079</span>, <span class="number">0.3061</span>, <span class="number">0.0468</span>, <span class="number">0.4392</span>],</span><br><span class="line">         [<span class="number">0.1974</span>, <span class="number">0.0678</span>, <span class="number">0.1153</span>, <span class="number">0.6196</span>],</span><br><span class="line">         [<span class="number">0.6294</span>, <span class="number">0.0799</span>, <span class="number">0.0879</span>, <span class="number">0.2029</span>]]])</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">max_probs, targets_u = torch.<span class="built_in">max</span>(A, dim=-<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(max_probs)</span><br><span class="line"><span class="built_in">print</span>(max_probs.shape)</span><br><span class="line"><span class="built_in">print</span>(targets_u)</span><br><span class="line"><span class="built_in">print</span>(targets_u.shape)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tensor([[<span class="number">0.6362</span>, <span class="number">0.3525</span>, <span class="number">0.7025</span>],</span><br><span class="line">        [<span class="number">0.4392</span>, <span class="number">0.6196</span>, <span class="number">0.6294</span>]])</span><br><span class="line">torch.Size([<span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line">tensor([[<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>],</span><br><span class="line">        [<span class="number">3</span>, <span class="number">3</span>, <span class="number">0</span>]])</span><br><span class="line"><span class="comment"># cifar10标签序号从0-9，一共十类，IN数据集标签序号从1-16，一共十六类</span></span><br><span class="line"><span class="comment"># 而torch.max返回的最大位置索引是从0开始，这会导致序号对不上</span></span><br><span class="line"><span class="comment"># 上句话不对，加载数据集的时候已经把0标签排除了，所以不影响</span></span><br><span class="line">torch.Size([<span class="number">2</span>, <span class="number">3</span>])</span><br></pre></td></tr></table></figure>
<h2 id="模型保存与加载">模型保存与加载</h2>
<h3 id="模型保存过程">模型保存过程</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> args.local_rank <span class="keyword">in</span> [-<span class="number">1</span>, <span class="number">0</span>]:</span><br><span class="line">    test_loss, test_acc = test(args, test_loader, test_model, epoch)</span><br><span class="line">    </span><br><span class="line">    args.writer.add_scalar(<span class="string">&#x27;train/1.train_loss&#x27;</span>, losses.avg, epoch)</span><br><span class="line">    args.writer.add_scalar(<span class="string">&#x27;train/2.train_loss_x&#x27;</span>, losses_x.avg, epoch)</span><br><span class="line">    args.writer.add_scalar(<span class="string">&#x27;train/3.train_loss_u&#x27;</span>, losses_u.avg, epoch)</span><br><span class="line">    args.writer.add_scalar(<span class="string">&#x27;train/4.mask&#x27;</span>, mask_probs.avg, epoch)</span><br><span class="line">    args.writer.add_scalar(<span class="string">&#x27;test/1.test_acc&#x27;</span>, test_acc, epoch)</span><br><span class="line">    args.writer.add_scalar(<span class="string">&#x27;test/2.test_loss&#x27;</span>, test_loss, epoch)</span><br><span class="line">    </span><br><span class="line">    is_best = test_acc &gt; best_acc</span><br><span class="line">    best_acc = <span class="built_in">max</span>(test_acc, best_acc)</span><br><span class="line">    </span><br><span class="line">    model_to_save = model.module <span class="keyword">if</span> <span class="built_in">hasattr</span>(model, <span class="string">&quot;module&quot;</span>) <span class="keyword">else</span> model <span class="comment"># hasattr() 函数用于判断对象是否包含对应的属性</span></span><br><span class="line">    <span class="keyword">if</span> args.use_ema:</span><br><span class="line">        ema_to_save = ema_model.ema.module <span class="keyword">if</span> <span class="built_in">hasattr</span>(</span><br><span class="line">            ema_model.ema, <span class="string">&quot;module&quot;</span>) <span class="keyword">else</span> ema_model.ema</span><br><span class="line">        save_checkpoint(&#123;</span><br><span class="line">            <span class="string">&#x27;epoch&#x27;</span>: epoch + <span class="number">1</span>,</span><br><span class="line">            <span class="string">&#x27;state_dict&#x27;</span>: model_to_save.state_dict(),</span><br><span class="line">            <span class="string">&#x27;ema_state_dict&#x27;</span>: ema_to_save.state_dict() <span class="keyword">if</span> args.use_ema <span class="keyword">else</span> <span class="literal">None</span>,</span><br><span class="line">            <span class="string">&#x27;acc&#x27;</span>: test_acc,</span><br><span class="line">            <span class="string">&#x27;best_acc&#x27;</span>: best_acc,</span><br><span class="line">            <span class="string">&#x27;optimizer&#x27;</span>: optimizer.state_dict(),</span><br><span class="line">            <span class="string">&#x27;scheduler&#x27;</span>: scheduler.state_dict(),</span><br><span class="line">        &#125;, is_best, args.out)</span><br><span class="line">        </span><br><span class="line">        test_accs.append(test_acc)</span><br><span class="line">        logger.info(<span class="string">&#x27;Best top-1 acc: &#123;:.3f&#125;&#x27;</span>.<span class="built_in">format</span>(best_acc))</span><br><span class="line">        logger.info(<span class="string">&#x27;Mean top-1 acc: &#123;:.3f&#125;\n&#x27;</span>.<span class="built_in">format</span>(</span><br><span class="line">            np.mean(test_accs[-<span class="number">20</span>:])))</span><br></pre></td></tr></table></figure>
<h3 id="状态字典state_dict">状态字典：state_dict：</h3>
<p>在PyTorch中，<code>torch.nn.Module</code>模型的可学习参数（即权重和偏差）包含在模型的参数中，（使用<code>model.parameters()</code>可以进行访问）。
<code>state_dict</code>是Python字典对象，它将每一层映射到其参数张量。注意，只有具有可学习参数的层（如卷积层，线性层等）的模型才具有<code>state_dict</code>这一项。目标优化<code>torch.optim</code>也有<code>state_dict</code>属性，它包含有关优化器的状态信息，以及使用的超参数。
因为state_dict的对象是Python字典，所以它们可以很容易的保存、更新、修改和恢复，为PyTorch模型和优化器添加了大量模块。
下面通过从简单模型训练一个分类器中来了解一下<code>state_dict</code>的使用。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">import</span> torch.nn.functional <span class="keyword">as</span> F</span><br><span class="line"><span class="keyword">import</span> torch.optim <span class="keyword">as</span> optim</span><br><span class="line"><span class="comment"># 定义模型</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TheModelClass</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(TheModelClass, self).__init__()</span><br><span class="line">        self.conv1 = nn.Conv2d(<span class="number">3</span>, <span class="number">6</span>, <span class="number">5</span>)</span><br><span class="line">        self.pool = nn.MaxPool2d(<span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">        self.conv2 = nn.Conv2d(<span class="number">6</span>, <span class="number">16</span>, <span class="number">5</span>)</span><br><span class="line">        self.fc1 = nn.Linear(<span class="number">16</span> * <span class="number">5</span> * <span class="number">5</span>, <span class="number">120</span>)</span><br><span class="line">        self.fc2 = nn.Linear(<span class="number">120</span>, <span class="number">84</span>)</span><br><span class="line">        self.fc3 = nn.Linear(<span class="number">84</span>, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        x = self.pool(F.relu(self.conv1(x)))</span><br><span class="line">        x = self.pool(F.relu(self.conv2(x)))</span><br><span class="line">        x = x.view(-<span class="number">1</span>, <span class="number">16</span> * <span class="number">5</span> * <span class="number">5</span>)</span><br><span class="line">        x = F.relu(self.fc1(x))</span><br><span class="line">        x = F.relu(self.fc2(x))</span><br><span class="line">        x = self.fc3(x)</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化模型</span></span><br><span class="line">model = TheModelClass()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化优化器</span></span><br><span class="line">optimizer = optim.SGD(model.parameters(), lr=<span class="number">0.001</span>, momentum=<span class="number">0.9</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印模型的状态字典</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Model&#x27;s state_dict:&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> param_tensor <span class="keyword">in</span> model.state_dict():</span><br><span class="line">    <span class="built_in">print</span>(param_tensor, <span class="string">&quot;\t&quot;</span>, model.state_dict()[param_tensor].size())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印优化器的状态字典</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Optimizer&#x27;s state_dict:&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> var_name <span class="keyword">in</span> optimizer.state_dict():</span><br><span class="line">    <span class="built_in">print</span>(var_name, <span class="string">&quot;\t&quot;</span>, optimizer.state_dict()[var_name])</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Model<span class="string">&#x27;s state_dict:</span></span><br><span class="line"><span class="string">conv1.weight 	 torch.Size([6, 3, 5, 5])</span></span><br><span class="line"><span class="string">conv1.bias 	 torch.Size([6])</span></span><br><span class="line"><span class="string">conv2.weight 	 torch.Size([16, 6, 5, 5])</span></span><br><span class="line"><span class="string">conv2.bias 	 torch.Size([16])</span></span><br><span class="line"><span class="string">fc1.weight 	 torch.Size([120, 400])</span></span><br><span class="line"><span class="string">fc1.bias 	 torch.Size([120])</span></span><br><span class="line"><span class="string">fc2.weight 	 torch.Size([84, 120])</span></span><br><span class="line"><span class="string">fc2.bias 	 torch.Size([84])</span></span><br><span class="line"><span class="string">fc3.weight 	 torch.Size([10, 84])</span></span><br><span class="line"><span class="string">fc3.bias 	 torch.Size([10])</span></span><br><span class="line"><span class="string">Optimizer&#x27;</span>s state_dict:</span><br><span class="line">state 	 &#123;&#125;</span><br><span class="line">param_groups 	 [&#123;<span class="string">&#x27;lr&#x27;</span>: <span class="number">0.001</span>, <span class="string">&#x27;momentum&#x27;</span>: <span class="number">0.9</span>, <span class="string">&#x27;dampening&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;weight_decay&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;nesterov&#x27;</span>: <span class="literal">False</span>, <span class="string">&#x27;maximize&#x27;</span>: <span class="literal">False</span>, <span class="string">&#x27;params&#x27;</span>: [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]&#125;]</span><br></pre></td></tr></table></figure>
<h3
id="定义save_checkpoint保存完整模型">定义save_checkpoint保存完整模型</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">save_checkpoint</span>(<span class="params">state, is_best, checkpoint, filename=<span class="string">&#x27;checkpoint.pth.tar&#x27;</span></span>):</span><br><span class="line">    filepath = os.path.join(checkpoint, filename)</span><br><span class="line">    torch.save(state, filepath) <span class="comment"># 保存模型</span></span><br><span class="line">    <span class="keyword">if</span> is_best:</span><br><span class="line">        shutil.copyfile(filepath, os.path.join(checkpoint, <span class="string">&#x27;model_best.pth.tar&#x27;</span>)) <span class="comment"># 复制文件</span></span><br></pre></td></tr></table></figure>
<p>当保存好模型用来推断的时候，只需要保存模型学习到的参数，使用<code>torch.save()</code>函数来保存模型<code>state_dict</code>。
在 PyTorch 中最常见的模型保存使‘.pt’或者是‘.pth’作为模型文件扩展名。
在运行推理之前，务必调用<code>model.eval()</code>去设置 dropout 和 batch
normalization 层为评估模式。如果不这么做，可能导致模型推断结果不一致。
注意：
<code>load_state_dict()</code>函数只接受字典对象，而不是保存对象的路径。这就意味着在你传给<code>load_state_dict()</code>函数之前，你必须反序列化你保存的<code>state_dict</code>。例如，你无法通过
<code>model.load_state_dict(PATH)</code>来加载模型。</p>
<h3 id="保存和加载-checkpoint-用于推理继续训练">保存和加载 Checkpoint
用于推理/继续训练</h3>
<h4 id="保存checkpoint"><strong>保存Checkpoint：</strong></h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">save_checkpoint(&#123;</span><br><span class="line">            <span class="string">&#x27;epoch&#x27;</span>: epoch + <span class="number">1</span>,</span><br><span class="line">            <span class="string">&#x27;state_dict&#x27;</span>: model_to_save.state_dict(),</span><br><span class="line">            <span class="string">&#x27;ema_state_dict&#x27;</span>: ema_to_save.state_dict() <span class="keyword">if</span> args.use_ema <span class="keyword">else</span> <span class="literal">None</span>,</span><br><span class="line">            <span class="string">&#x27;acc&#x27;</span>: test_acc,</span><br><span class="line">            <span class="string">&#x27;best_acc&#x27;</span>: best_acc,</span><br><span class="line">            <span class="string">&#x27;optimizer&#x27;</span>: optimizer.state_dict(),</span><br><span class="line">            <span class="string">&#x27;scheduler&#x27;</span>: scheduler.state_dict(),</span><br><span class="line">        &#125;, is_best, args.out)</span><br></pre></td></tr></table></figure>
<p>当保存成 Checkpoint
的时候，可用于推理或者是继续训练，保存的不仅仅是模型的<code>state_dict</code>。保存优化器的<code>state_dict</code>也很重要,
因为它包含作为模型训练更新的缓冲区和参数。你也许想保存其他项目，比如最新记录的训练损失，外部的<code>torch.nn.Embedding</code>层等等。
要保存多个组件，请在字典中组织它们并使用<code>torch.save()</code>来序列化字典。PyTorch
中常见的保存checkpoint是使用 .tar 文件扩展名。
要加载项目，首先需要初始化模型和优化器，然后使用<code>torch.load()</code>来加载本地字典。这里，你可以非常容易的通过简单查询字典来访问你所保存的项目。
请记住在运行推理之前，务必调用<code>model.eval()</code>去设置 dropout 和
batch normalization 为评估。如果不这样做，有可能得到不一致的推断结果。
如果你想要恢复训练，请调用<code>model.train()</code>以确保这些层处于训练模式。</p>
<h4 id="加载checkpoint"><strong>加载Checkpoint：</strong></h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> args.resume:</span><br><span class="line">    logger.info(<span class="string">&quot;==&gt; Resuming from checkpoint..&quot;</span>)</span><br><span class="line">    <span class="comment"># os.path.isfile判断某一对象(需提供绝对路径)是否为文件</span></span><br><span class="line">    <span class="keyword">assert</span> os.path.isfile(</span><br><span class="line">        args.resume), <span class="string">&quot;Error: no checkpoint directory found!&quot;</span></span><br><span class="line">    args.out = os.path.dirname(args.resume)</span><br><span class="line">    checkpoint = torch.load(args.resume)</span><br><span class="line">    best_acc = checkpoint[<span class="string">&#x27;best_acc&#x27;</span>]</span><br><span class="line">    args.start_epoch = checkpoint[<span class="string">&#x27;epoch&#x27;</span>]</span><br><span class="line">    model.load_state_dict(checkpoint[<span class="string">&#x27;state_dict&#x27;</span>])</span><br><span class="line">    <span class="keyword">if</span> args.use_ema:</span><br><span class="line">        ema_model.ema.load_state_dict(checkpoint[<span class="string">&#x27;ema_state_dict&#x27;</span>])</span><br><span class="line">    optimizer.load_state_dict(checkpoint[<span class="string">&#x27;optimizer&#x27;</span>])</span><br><span class="line">    scheduler.load_state_dict(checkpoint[<span class="string">&#x27;scheduler&#x27;</span>])</span><br></pre></td></tr></table></figure>
<h4 id="加载最优模型">加载最优模型：</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 自己写的</span></span><br><span class="line">filepath = os.path.join(args.out, <span class="string">&#x27;model_best.pth.tar&#x27;</span>)</span><br><span class="line">    <span class="keyword">assert</span> os.path.isfile(filepath), <span class="string">&quot;Error: no model_best directory found!&quot;</span></span><br><span class="line">    model.load_state_dict(torch.load(filepath)[<span class="string">&#x27;state_dict&#x27;</span>])</span><br><span class="line">    <span class="keyword">if</span> args.use_ema:</span><br><span class="line">        ema_model.ema.load_state_dict(torch.load(filepath)[<span class="string">&#x27;ema_state_dict&#x27;</span>])</span><br></pre></td></tr></table></figure>
<h2 id="accuracy">accuracy</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># outputs.shape为 [batch_size, category_count]</span></span><br><span class="line"><span class="comment"># targets.shape为 [batch_size]，每个样本中只有一个真实的类</span></span><br><span class="line"><span class="comment"># topk是要包含在精度中的类的元组，例如topk=(1,5)，则包含五个类</span></span><br><span class="line"><span class="comment"># topk必须是一个元组，所以给出一个数字，不要忘记逗号</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">accuracy</span>(<span class="params">output, target, topk=(<span class="params"><span class="number">1</span>,</span>)</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Computes the precision@k for the specified values of k&quot;&quot;&quot;</span></span><br><span class="line">    maxk = <span class="built_in">max</span>(topk)</span><br><span class="line">    <span class="comment"># size函数：总元素的个数</span></span><br><span class="line">    batch_size = target.size(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># topk函数output的d维度中选取前k个最大的值，下式为前maxk个</span></span><br><span class="line">    <span class="comment"># _, pred = output.topk(maxk, 1, True, True)</span></span><br><span class="line">    <span class="comment"># output.shape为 [batch_size, category_count]，dim=1，所以我们为每个batch选择最大的类别数</span></span><br><span class="line">    <span class="comment"># 输入结果为[ batch_size,maxk]</span></span><br><span class="line">    <span class="comment"># topk返回结果的元组 (values, indexes) (值，索引)</span></span><br><span class="line">    <span class="comment"># 我们只需要索引(pred)</span></span><br><span class="line">    _, pred = output.topk(maxk, dim=<span class="number">1</span>, largest=<span class="literal">True</span>, <span class="built_in">sorted</span>=<span class="literal">True</span>)</span><br><span class="line">    <span class="comment"># 然后我们将索引转置为 [maxk, batch_size]</span></span><br><span class="line">    pred = pred.t()</span><br><span class="line">    correct = pred.eq(target.reshape(<span class="number">1</span>, -<span class="number">1</span>).expand_as(pred))</span><br><span class="line">    <span class="comment"># torch.eq对两个张量Tensor进行逐元素的比较，若相同位置的两个元素相同，则返回True；若不同，返回False</span></span><br><span class="line">    <span class="comment"># 将target展平，并将target扩展成类似于pred</span></span><br><span class="line">    <span class="comment"># target [batch_size] 变成 [1,batch_size]</span></span><br><span class="line">    <span class="comment"># target [1,batch_size] 通过广播？重复相同的类maxk次，从 [1,batch_size] 变为 [maxk, batch_size]</span></span><br><span class="line">    <span class="comment"># 当将索引(pred)与扩展后的target比较时，即torch.eq，会得到形状为 [maxk, batch_size] 的矩阵correct</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; correct=([[0, 0, 1,  ..., 0, 0, 0],</span></span><br><span class="line"><span class="string">         [1, 0, 0,  ..., 0, 0, 0],</span></span><br><span class="line"><span class="string">         [0, 0, 0,  ..., 1, 0, 0],</span></span><br><span class="line"><span class="string">         [0, 0, 0,  ..., 0, 0, 0],</span></span><br><span class="line"><span class="string">         [0, 1, 0,  ..., 0, 0, 0]], device=&#x27;cuda:0&#x27;, dtype=torch.uint8) &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    res = []</span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> topk:</span><br><span class="line">        correct_k = correct[:k].reshape(-<span class="number">1</span>).<span class="built_in">float</span>().<span class="built_in">sum</span>(<span class="number">0</span>)</span><br><span class="line">        <span class="comment"># correct[:k]：[maxk, batch_size] -&gt; [k, batch_size]</span></span><br><span class="line">        <span class="comment"># .reshape(-1)：[k, batch_size] -&gt; [k*batch_size]</span></span><br><span class="line">        <span class="comment"># .sum(0)：[k*batch_size] -&gt; [1]</span></span><br><span class="line">        res.append(correct_k.mul_(<span class="number">100.0</span> / batch_size))</span><br><span class="line">        <span class="comment"># mul 乘法</span></span><br><span class="line">        <span class="comment"># 所有带_都是inplace，意思就是操作后，原数也会改动</span></span><br><span class="line">    <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>
<p>topk函数：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">torch.topk(input, k, dim=None, largest=True, sorted=True, out=None) -&gt; (Tensor, LongTensor)</span><br></pre></td></tr></table></figure>
<p>input (Tensor)：输入张量，一个tensor数据 k
(int)：指明是得到前k个数据以及其index dim (int, optional)：
指定在哪个维度上排序， 默认是最后一个维度 largest (bool,
optional)：如果为True，按照大到小排序； 如果为False，按照小到大排序
sorted (bool, optional) ：控制返回值是否排序 out (tuple,
optional)：可选输出张量 (Tensor, LongTensor)</p>
<p>例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = torch.tensor([[ <span class="number">0</span>,  <span class="number">1</span>,  <span class="number">1</span>,  <span class="number">0</span>],</span><br><span class="line">        [ <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">0</span>],</span><br><span class="line">        [ <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">0</span>],</span><br><span class="line">        [ <span class="number">1</span>,  <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">0</span>],</span><br><span class="line">        [ <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">1</span>]])</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="built_in">print</span>(a.shape)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tensor([[<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>],</span><br><span class="line">        [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">        [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">        [<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">        [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>]])</span><br><span class="line">torch.Size([<span class="number">5</span>, <span class="number">4</span>])</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">correct_1 = a[:<span class="number">1</span>].reshape(-<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(correct_1.shape)</span><br><span class="line"><span class="built_in">print</span>(correct_1)</span><br><span class="line">correct_1 = correct_1.<span class="built_in">float</span>().<span class="built_in">sum</span>(<span class="number">0</span>)</span><br><span class="line"><span class="built_in">print</span>(correct_1.shape)</span><br><span class="line"><span class="built_in">print</span>(correct_1)</span><br><span class="line">correct_1.mul_(<span class="number">100.0</span> / <span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(correct_1.shape)</span><br><span class="line"><span class="built_in">print</span>(correct_1)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">torch.Size([<span class="number">4</span>])</span><br><span class="line">tensor([<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>])</span><br><span class="line">torch.Size([])</span><br><span class="line">tensor(<span class="number">2.</span>)</span><br><span class="line">torch.Size([])</span><br><span class="line">tensor(<span class="number">50.</span>) <span class="comment"># top_1 = 50%</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">correct_5 = a[:<span class="number">5</span>].reshape(-<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(correct_5.shape)</span><br><span class="line"><span class="built_in">print</span>(correct_5)</span><br><span class="line">correct_5 = correct_5.<span class="built_in">float</span>().<span class="built_in">sum</span>(<span class="number">0</span>)</span><br><span class="line"><span class="built_in">print</span>(correct_5.shape)</span><br><span class="line"><span class="built_in">print</span>(correct_5)</span><br><span class="line">correct_5.mul_(<span class="number">100.0</span> / <span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(correct_5.shape)</span><br><span class="line"><span class="built_in">print</span>(correct_5)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">torch.Size([<span class="number">20</span>])</span><br><span class="line">tensor([<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>])</span><br><span class="line">torch.Size([])</span><br><span class="line">tensor(<span class="number">4.</span>)</span><br><span class="line">torch.Size([])</span><br><span class="line">tensor(<span class="number">100.</span>) <span class="comment"># top_5 = 100%</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>论文笔记</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>深度学习</tag>
      </tags>
  </entry>
  <entry>
    <title>基于人工标记的深度卷积神经网络在高光谱图像分类中的有效训练</title>
    <url>/article/20230131c94939a8.html</url>
    <content><![CDATA[<h1
id="基于人工标记的深度卷积神经网络在高光谱图像分类中的有效训练">基于人工标记的深度卷积神经网络在高光谱图像分类中的有效训练</h1>
<h2 id="主要问题">主要问题</h2>
<ol type="1">
<li>虽然深度学习神经网络（DLNN）可以获得非常好的精度分数，但它的缺点是需要大量的训练数据来估计模型参数。这样的数据并不总是可用的，因为通常一个高光谱图像只有少量训练标签可用。</li>
<li>迁移学习可以解决训练样本数量少的问题，但是这一策略并不直接适用于高光谱图像，因为通常情况下只有一种特定类型或特征的图像可用。</li>
</ol>
<h2 id="思路">思路</h2>
<p>对于DLNN分类，缺乏大量的训练数据是一个严重的复杂问题，因为它们通常需要大量数据才能实现高效率。DLNN在HSI分类中的最佳使用将需要仅用几个标记样本来学习它们。这可以通过搜索针对特定任务的定制良好的体系结构来获得，然而，这种方法需要相对较大的验证集才能获得有意义的结果。一种方法是扩大可用的训练集。这可以通过人工增加训练集或使用不同的数据集作为预训练的来源来实现。另一种方法是增加正则化步骤，以提高有限训练样本数量的泛化能力。在MugNet网络中采用了用于分类的网络体系结构的简化，其中训练样本很少。最后，在可能的情况下，使用转移学习方法。
迁移学习使用来自两个领域的训练样本，这两个领域具有共同的特征。网络首先在第一个域上进行预训练，该域有充足的训练样本供应，但不能解决手头的问题。随后，用第二个域更新训练，使权重适应实际问题。</p>
<h2 id="本文方法">本文方法</h2>
<p>为了缩小数据效率低下的深度学习模型与HSI实际应用之间的差距，我们提出了一种利用HSI图像上大量未标记数据点的方法。准确地说，我们提出了一个假设：可以利用未标记数据点的空间相似性来获得高光谱分类的准确性。为了证实我们的假设，我们构建了一个简单的空间聚类方法，该方法根据图像上的每个像素的空间位置为其分配人工标签。利用该人工数据集对深度学习分类器进行预训练。接下来，使用原始数据集对模型进行微调。通过一系列实验，我们证明了该方法优于标准的学习过程。我们的方法是由两个已知的现象驱动的:聚类假设和类中噪声的正则化效应。我们注意到，许多遥感图像具有共同的属性，最值得注意的是“聚类假设”——彼此接近或形成不同的聚类或组的像素经常共享类标签。此外，由于我们的聚类方法的简单形式，我们有目的地在预训练阶段使用的标签中引入噪声；只要正确标记的示例数量按比例缩放，这个标签噪声对最终的精度几乎没有影响。
我们的方法适用于以下情况：</p>
<ol type="1">
<li>高光谱遥感图像像素的分类；</li>
<li>神经网络用作分类器；</li>
<li>可用的培训标签很少。</li>
</ol>
<p>在这种情况下，我们建议用一个使用人工标签的预训练步骤来增强训练，这是独立于训练标签的。这一预训练步骤的加入可以看作是迁移学习方法的一种改进。在这种情况下，传统的迁移学习将使用具有大量标签的相关数据集(源域)进行预训练，然后使用当前数据集(目标域)进行微调。在我们的例子中，源域由高光谱图像中的每个点组成，而目标域仅由标记的样本组成。</p>
<span id="more"></span>
<h2 id="人工标记方法">人工标记方法</h2>
<p>我们为预训练步骤创建人工标签的方法是一种简单的分割算法，该算法假设样本光谱特征的局部同质性。它的工作原理是将考虑的图像分为<span
class="math inline">\(k\)</span>个矩形，其中每个矩形都有自己的标签。对于高<span
class="math inline">\(h\)</span>宽<span
class="math inline">\(w\)</span>的图像，我们将其高分为<span
class="math inline">\(m\)</span>个大致相等的部分，将其宽分为<span
class="math inline">\(n\)</span>个大致相等的部分，使<span
class="math inline">\(k = m·n\)</span>。然后我们得到<span
class="math inline">\(k\)</span>个矩形，其中每个矩形的高约等于<span
class="math inline">\(h/m\)</span>，而宽度约等于<span
class="math inline">\(w/n\)</span>。每个矩形用不同的标签定义一个不同的人工类。图1给出了一个示意图。</p>
<img src="/article/20230131c94939a8/image-20230130210123748.png" class="" title="image-20230130210123748">
<p>人工标签的功能是让网络学习数据中存在的与类无关的blob模式。这将网络训练的重点放在实际训练标签的微调上，而网络“面向”当前图像的特征。当一个类由多个blob组成，并且并非所有的blob在训练集中都有样本的情况下，它也是很有优势的。在这种情况下，仅使用训练样本不太可能获得足够正确的标签[62]，但提出的网格结构迫使网络估计整个图像的特征。这种方法的另一个优点是将潜在耗时的预训练从专家标记时刻转移到习得时刻。换句话说，网络培训不需要等到专家的标签可用，而是可以在图像记录后立即开始。</p>
<h2 id="实验">实验</h2>
<ol type="1">
<li>实验1使用不同的高光谱图像和神经网络结构对所提出的方法进行了评估，以证明其鲁棒性。</li>
<li>实验2调查了人工标记中使用的补丁大小和形状引入的可变性。</li>
<li>实验3我们测试了这样的假设，即划分更多的patch比划分更少的patch产生更好的预训练集。我们使用一张特别设计的高光谱测试图像来研究这一点。</li>
<li>实验4我们检查了第2.2节中关于在神经网络训练中使用提出的带有噪声标签的人工标签方案出现的数据依赖表示的说法。</li>
</ol>
]]></content>
      <categories>
        <category>论文笔记</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>深度学习</tag>
      </tags>
  </entry>
  <entry>
    <title>用于高光谱图像分类的折叠谱生成对抗网络</title>
    <url>/article/20230120c94939a8.html</url>
    <content><![CDATA[<h1
id="用于高光谱图像分类的折叠谱生成对抗网络">用于高光谱图像分类的折叠谱生成对抗网络</h1>
<h2 id="摘要">1. 摘要</h2>
<p>本文提出了一种新的基于生成对抗网络(GAN)和折叠谱(FS-GAN)的半监督方法。具体来说，将原始光谱向量折叠为二维正方形光谱作为GAN的输入，可以生成光谱纹理，并在相邻和非相邻光谱波段上提供更大的感受野，用于深度特征提取。然后将生成的假折叠谱、标记和未标记的真实折叠谱输入到鉴别器中进行半监督学习。采用特征匹配策略防止模型崩溃。</p>
<h2 id="本文工作">2. 本文工作</h2>
<ol type="1">
<li>提出了一种新的基于半监督GAN的HSI分类算法，该算法结合了折叠谱和端到端半监督GAN模型。折叠谱可以挖掘谱域中的纹理信息，而端到端半监督GAN模型提供了最好的未标记样本。</li>
<li>采用特征匹配策略来稳定GAN的训练过程</li>
</ol>
<span id="more"></span>
<h2 id="本文方法">3. 本文方法</h2>
<h3 id="折叠光谱">3.1 折叠光谱</h3>
<h4 id="思路">3.1.1 思路</h4>
<p>空间相关性已在传统和基于 DL 的 HSI
算法中得到了充分的利用，但研究人员较少考虑谱域中的大量信息。此外，使用
CNN 作为基本模型的基于 DL
的算法利用卷积核作为特征提取的函数，因此它们的模型主要关注固定感受野中的特征。我们设计了一种折叠谱策略，可以直接将一维谱向量转换为二维图像，然后充分利用卷积核在谱域中提取特征的能力。</p>
<h4 id="方法">3.1.2 方法</h4>
<p>折叠光谱有两个优点：</p>
<p>1.折叠光谱可以从具有正方形形状的折叠光谱中提取光谱域中的纹理特征。选择折叠光谱曲线而不是仅仅重塑的原因是，重塑会破坏光谱向量的拓扑结构，而折叠光谱可以增强折叠光谱的边缘连续性。</p>
<img src="/article/20230120c94939a8/image-20230120211600109.png" class="" title="image-20230120211600109">
<p>如图1所示，长度为225的光谱向量可以转换为15*15的折叠光谱。这样，可以像HSI的空间纹理特征一样，清晰地找到2D折叠频谱中的光谱纹理特征。然后，我们可以使用这些特征来辅助HSI分类。此外，我们选择正方形以获得折叠光谱的最佳形状。<strong>由于正方形在高度和宽度上都比其他矩形具有相等和充分的纹理信息，因此具有更多的光谱纹理特征</strong>，当光谱向量的长度不能折叠成正方形时，我们选择以相反的顺序从最后一个波段扩展光谱向量。遵循这一规则，我们确保正方形折叠频谱可以进入生成对抗网络，而不会丢失频谱信息并破坏频谱向量拓扑。</p>
<p>2.与原始谱向量相比，更多的不连续谱带现在位于相邻位置。当通过卷积核从折叠的光谱中提取特征时，这些远带将位于相同的感受野中。</p>
<img src="/article/20230120c94939a8/image-20230120214023604.png" class="" title="image-20230120214023604">
<p>如图2所示，我们比较了1D谱向量和2D折叠谱之间的感受野差异。一维光谱矢量中的感受野只能覆盖一小范围的光谱，而二维折叠光谱可以覆盖整个正方形。因此，通过采用折叠光谱，借助于更大的感受野，可以发现更多的光谱信息。</p>
<h3 id="折叠频谱生成对抗网络fs-gan">3.2
折叠频谱生成对抗网络（FS-GAN）</h3>
<h4 id="思路-1">3.2.1 思路</h4>
<p>传统的GAN由两个子模型组成：生成器和鉴别器。这两个模型使用极小极大博弈来学习生成分布，并进一步匹配真实数据分布。生成器通过变换噪声变量来产生样本，并且鉴别器区分样本是来自真实数据还是生成器。通过交替训练生成器和鉴别器，生成器将输出真实的样本并且无法区分生成数据和真实数据。</p>
<p>受GAN的启发，我们设计了一种折叠频谱（FS-GAN），它可以实现HSI端到端半监督分类。FS-GAN的发生器和鉴别器都是从CNN修改而来的，以适应折叠频谱的设计。可以总结出FS-GAN的两个主要改进。首先，FS-GAN不再使用1D神经网络，而是应用2D神经网络来生成和区分折叠频谱。其次，我们设计了一个端到端的模型，没有预训练和微调过程。基于上述改进，可以在更简单的网络结构中提高分类性能。</p>
<h4 id="方法-1">3.2.2 方法</h4>
<img src="/article/20230120c94939a8/image-20230120214831066.png" class="" title="image-20230120214831066">
<p>图三为FS-GAN框架，我们可以看到生成器接收到噪声<span
class="math inline">\(\rho_z(z)\)</span>作为输入，而鉴别器接收标记和未标记的
HSI
折叠谱，结合生成器提供的生成折叠谱作为输入。鉴别器的最后一层不再是只区分测试样本真伪的二进制分类器。相反，我们选择<span
class="math inline">\(K+1\)</span>分类器，其中<span
class="math inline">\(K\)</span>是类的数量，另一类是假样本的类。只要我们将折叠谱输入到模型中，就可以实现来自分类器的<span
class="math inline">\(K+1\)</span>的逻辑向量<span
class="math inline">\({l_1,...,l_{k+1}}\)</span>。FS-GAN的损失函数<span
class="math inline">\(L\)</span>包括两部分，监督损失<span
class="math inline">\(L_{supervised}\)</span>由预测类<span
class="math inline">\(\rho_{model}(x,y)\)</span>和有标签折叠谱<span
class="math inline">\(\rho_{data}(x,y)\)</span>交叉熵得到，无监督损失<span
class="math inline">\(L_{unsupervised}\)</span>是根据未标记的<span
class="math inline">\(\rho_{data}(x)\)</span>和生成的折叠谱<span
class="math inline">\(G(z)\)</span>分别分为K个真类和一个假类的概率<span
class="math inline">\(\rho_{model}\)</span>设计的。
在此基础上，FS-GAN的损失函数为：</p>
<img src="/article/20230120c94939a8/image-20230120231144192-16742275049231.png" class="" title="image-20230120231144192">
<p>半监督GAN的训练过程不稳定，容易分解。为了解决这些问题，我们采用了特征匹配策略，而不是简单地最大化鉴别器的输出。这种特征匹配策略将通过设置生成器中的不动点来使生成的数据与真实数据分布匹配。固定点是根据真实数据计算的，因此可以准确地描述真实数据的分布。如图
4 所示，我们选择隐藏层<span
class="math inline">\(f(x)\)</span>的输出作为不动点，这意味着判别器不会过度训练，FS-GAN
模型会变得稳定。</p>
<img src="/article/20230120c94939a8/image-20230120231251740.png" class="" title="image-20230120231251740">
<p>FS-GAN的更新损失函数如下：</p>
<img src="/article/20230120c94939a8/image-20230120231417367.png" class="" title="image-20230120231417367">
]]></content>
      <categories>
        <category>论文笔记</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>深度学习</tag>
      </tags>
  </entry>
</search>
